name: Test and Coverage

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: synergy_va_ops_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        env:
          PUPPETEER_SKIP_DOWNLOAD: 'true'
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npm run check

      - name: Run tests with coverage
        env:
          TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/synergy_va_ops_test
          NODE_ENV: test
          SLACK_BOT_TOKEN: xoxb-test-token
          SLACK_SIGNING_SECRET: test-signing-secret
          SLACK_APP_LEVEL_TOKEN: xapp-test-token
          WEBHOOK_CONDUIT_SECRET: test-secret
          WEBHOOK_SUITEOP_SECRET: test-secret
          APP_BASE_URL: http://localhost:3000
          MANAGER_SLACK_ID: U123456789
          TZ_MANAGER: America/Chicago
          TZ_TEAM: Asia/Manila
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: romeovs/lcov-reporter-action@v0.3.1
        with:
          lcov-file: ./coverage/lcov.info
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Archive coverage artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 7

      - name: Check coverage thresholds
        run: |
          if [ -f coverage/coverage-summary.json ]; then
            echo "Coverage report generated successfully"
            cat coverage/coverage-summary.json | jq '.total'
          else
            echo "Warning: No coverage summary found"
          fi
